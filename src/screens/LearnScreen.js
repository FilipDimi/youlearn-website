import React, { useState, useEffect } from "react";
import YouTube from "react-youtube";
import { FlashcardArray } from "react-quizlet-flashcard";
import styles from "./LearnScreen.module.css";
import {
  Card,
  Text,
  Textarea,
  Button,
} from "@nextui-org/react";

import NeuralNetwork from "../components/NeuralNetwork";
import QuestionContainer from "../components/QuestionContainer";
import Header from "../components/Header";

const calculusQuestions = [
  {
    question: "What is the integral of sin(x)?",
    A: "A) cos(x)",
    B: "B) -cos(x)",
    C: "C) sin(x)",
    D: "D) -sin(x)",
    correct: "B",
    feedback: "B) -cos(x)",
  },
  {
    question:
      "What is the area under the curve of y = x^2 from x = 0 to x = 2?",
    A: "A) 4/3",
    B: "B) 2",
    C: "C) 8/3",
    D: "D) 4",
    correct: "C",
    feedback: "C) 8/3",
  },
  {
    question:
      "What technique is commonly used to integrate functions involving products of sines and cosines?",
    A: "A) Integration by parts",
    B: "B) U-substitution",
    C: "C) Partial fractions",
    D: "D) Trigonometric substitution",
    correct: "A",
    feedback: "A) Integration by parts",
  },
  {
    question:
      "Which method is most appropriate for finding the volume of a solid generated by rotating the region bounded by y=x^2 and y=4 about the x-axis?",
    A: "A) Washer method",
    B: "B) Shell method",
    C: "C) Disk method",
    D: "D) Cylindrical shells",
    correct: "C",
    feedback: "C) Disk method",
  },
  {
    question:
      "What is the convergence test used for a series with terms that alternate in sign?",
    A: "A) Ratio test",
    B: "B) Root test",
    C: "C) Alternating series test",
    D: "D) Comparison test",
    correct: "C",
    feedback: "C) Alternating series test",
  },
  {
    question:
      "Which of the following is a proper definition of a convergent sequence?",
    A: "A) A sequence that approaches a finite limit as n approaches infinity",
    B: "B) A sequence that has no limit",
    C: "C) A sequence that approaches infinity as n approaches infinity",
    D: "D) A sequence that has no upper bound",
    correct: "A",
    feedback:
      "A) A sequence that approaches a finite limit as n approaches infinity",
  },
];

const LearnScreen = () => {
  const [screenWidth, setScreenWidth] = useState(window.innerWidth);

  const cards = [
    {
      id: 1,
      front: "What is the capital of <u>Alaska</u>?",
      back: "Juneau",
      frontHTML: "What?",
      frontContentStyle: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        backgroundColor: '#16181A',
        color: '#fff'
      },
      backHTML: "Yes",
      backContentStyle: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        backgroundColor: '#16181A',
        color: '#fff'
      },
    },
  ];

  useEffect(() => {
    setScreenWidth(screenWidth);
    console.log(screenWidth);
  }, [screenWidth]);

  return (
    <>
      <Header />
      <NeuralNetwork />
      <div className={styles.main}>
        <div className={styles.mainVContainer}>
          <div className={styles.firstHContainer}>
            {screenWidth > 850 ? (
              <YouTube
                videoId="Tn6-PIqc4UM"
                opts={{ width: 800, height: 500, borderRadius: 30 }}
              />
            ) : (
              <YouTube
                videoId="Tn6-PIqc4UM"
                opts={{ width: 300, height: 200 }}
              />
            )}

            <div className={styles.transriptDiv}>
              <h3 style={{ marginBottom: 30 }}>Video's Transript</h3>
              <p style={{ color: "white", textAlign: 'justify' }}>
  
              </p>
            </div>
          </div>
          <div className={styles.secondHContainer}>
            <Card style={{ backgroundColor: "#16181A", padding: 50 }}>
              <QuestionContainer
                question={calculusQuestions[0].question}
                A={calculusQuestions[0].A}
                B={calculusQuestions[0].B}
                C={calculusQuestions[0].C}
                D={calculusQuestions[0].D}
                correct={calculusQuestions[0].correct}
                feedback={calculusQuestions[0].feedback}
              />
            </Card>
            <div style={{ backgroundColor: "#16B35B", borderRadius: 20 }}>
              <FlashcardArray cards={cards} />
            </div>
            <Card
              css={{
                backgroundColor: "#16181A",
                padding: 20,
                opacity: 0.85,
              }}
            >
              <h3>Short Answer</h3>
              <Text color="#fff" size={18} css={{ marginTop: 10 }}>
                Wuestions sdf sdfdskjjknnf sdf jnks efs f skjn
              </Text>
              <Textarea
                labelPlaceholder="Answer"
                status="success"
                css={{
                  opacity: 0.8,
                  color: "#000",
                  marginTop: 18,
                  marginBottom: 15,
                }}
              />
              <Button color="success" auto>
                Submit
              </Button>
            </Card>
          </div>
        </div>
      </div>
    </>
  );
};

export default LearnScreen;
